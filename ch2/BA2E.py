import numpy as np
from collections import Counter

def greedy_motifs(dna, k, t):
  best_motifs = [strand[0:k] for strand in dna]

  for i in range(len(dna[0]) - k + 1):
    motif_0 = dna[0][i:i+k]
    motifs = [motif_0]
    for j in range(1,t):
      most_probable = most_probable_motif(dna[j],motifs,k, t)
      motifs.append(most_probable)
    if score(motifs) < score(best_motifs):
      best_motifs = motifs
  return best_motifs
#add pseudocounts
def most_probable_motif(text, motifs, k, t):
  profile = [Counter([motif[i] for motif in motifs]) for i in range(k)]
  print(profile)
  most_probable_motif = text[0:k]
  max_prob = 0
  for i in range(len(text) - k + 1):
    prob = 1.0
    for j, base in enumerate(text[i:i+k]):
      #simplest to add pseudocounts here
      prob *= ((profile[j][base] + 1) / float(t + 4))
    if prob > max_prob:

      max_prob = prob
      most_probable_motif = text[i:i+k]
  print(most_probable_motif)
  return most_probable_motif

def score(motifs):
  counts = [Counter([motif[i]for motif in motifs]) for i in range(len(motifs[0]))]
  for ele in counts:
    print(ele)
  consensus = [max(ele, key=ele.get) for ele in counts]
  print(consensus)
  total = 0
  for motif in motifs:
    total += hamming(motif, consensus)
  return total

def hamming(a,b):
  return sum([i != j for i, j in zip(a,b)])

motifs = '''AGCACCTGCAACTTGGTAGCAATTTGGAGCGAAACATGAAGATAGATCGTAGTACTTTGCAATGTGGATTTGGTTAGGTCAGACATGGGTGCGTGGGTGCGTAAGCCCGGCAGATGTTAACGTGACATCTAAGACTATGCCCGGTCTGAGCCGCGC
ATAGGGACTACCTCCTGGAGGGCTAGCGGTGCGATGCTTTTTTATTGATATTTTGCCTTCGGACACCGTCCGTCGGCTGTGCAGACAGTGATAGGGAAATAATGTTCCTCGATTAGGGGAATGTCATGCTGGGGATATATTCTTTGTGGCATGCCA
TAGCGCGCGGGTTGTACAGCCCCGTAGTGGAGGGGAATTAGCAATTTTAGTGGTGCGGTGAGGACATAGGACATGCGTCCGGTGGGAACATGACGAACGACTTCAATGTTACACACCTTTGTTGATGGCACGTGTAAGGGTCTTTCTACGGAGCCT
GTCTGACCACGGTCCCCTGGCTTTACGTTACGATGGATGCTTCGGGACCTCTTTACGGCCCTCGCGGACAGTACGAACATTGAAGGCTCAAGGCCAAATGGTGCGTGGCCTGTCATACTTGAGATAATATTTAGGGCGTTTAGTTATCTACAGTTT
CGATGAGCGTGGAACGGTGCGAGGATGGAGGAGAACAGCACGCTATCTTGACAAGACTGGAGCATTGTGGCACATGACATACGGCTAAGGGGATTAAGTGCTCCCCTATTATGCAGGGCGGAGTCGGGATGACCTGACTATTATGGGAAATAGCGC
AGGGGTGCGGTGAGAACCCTTGATCCCAGTTCTGGGACTCGTGAATAGCTCAACCTATCGATTTATAATCAGAATGATCGTAGTCGTAACTCGCAGGGTACCCGGCAAACGGACTATCAGAGGATTTGTATTCTCTTGGCGCTCCTCCACACTGGA
GACCCAGGTCGAGGTGAGGTCCCTGCTACGAATAAAGCCGAGACATCATACCATGAGGCTTCTCCTAAAATTCCGAGGAGGCTTGCCGCGACTCCGGGCGACCGGATTACGGATGCCTTTAGCGGTGCGGCGCACGATGACTGGCGCCATTTCTGG
TCGCTGCTCCTCCATCGGAGCTCAACTGGTGCGAGGAGCCCTTACGCGCATACCTCCTGGACCAATCCTACGTCCTCGGGGCACGAAGCGGTTGACTGAGCGGACCACGCGCCCAGTGTCTATGAAGAACGGTGCGCTACGCCGGTTGTTATGCTC
TGTCATTTGAGACTGGCATCTCGCAATGAACATTCGCTCATATTTGGACCCTACGTTCATGGCCTAGTCATGTTATATGTGGGTAGTGTGGGTGAGGAAGTGATTCACCTGCCGAGCTTGGCCGGCCTCTTTTAATTGCGGTCCACAGGTGCGCTG
TAGCCCGAAACAAGCAGAATGCAGATGGTTAGTCCTATGCAACAAAGCATGGGTGCGGAGCTAGAAATCCCGTGCCTTGACCTCTGTCCAGGTAATGAATTGTGGCACGTTGTCCCTCGACTAGCACCTTCCGGTATTCTTTACTTGCAAATGCCA
AATTGGAACAGCACTAGCAAGGCTAAAGGTGCGGGGTGGCGTCTGCACTCACATGAAGGCATCGGTTCACACCGTCCTCAGATTGGGTAACAGGATGGATAACACATCTCAATTATTCATACTTTACCAGTTGAGACTACAAGAATGGAGGGGCAT
GCGAGATAGTCGGCGTCACACCGGTCGCCCCGGCGTTTTGACTTTGCCCTGCAACTTCGACACGATTGAAGGAGGGTGACCCTAATGTGAATCAGCGCCACGCGTACTGGAAGAACGAGTACGGGTGCGTTGTAGGTAGGGTGAGACTCCGGGCAT
CCTCCATATAGTGCGTCTGGTGGTGGTGTTGGGTCAAAGAGTGCCGGCCTATTGCTCTTCATTGGTGCGCGGGATCTCGCGGATTGTACCGTTTCTAACCGTATTTACTTTCGCATCCTTATCCCACCGGGCTCCGAACTCAAAACCCGCCGATCT
TTACTCCGTCTACACGAAGCATTAGTCTGAAGGGCACGTTTACAAATTACTGAGTGTGGCATAAGAAATCAACGGAAGAATATCCGATTGGGACCAACTTGGTTTAGGAGGGGTGCGATGGTCCCCACTCATTGGGTCACCCGGCGGCCCTGCCGT
ACTAAAAACATACGCATGACCCAGGCCGCTAAGTTGATGGAGTTTTCTTCCCCCAAGGCGTGCACTCTGGCGGCGGTGCATAACGCATGAAATTGGAGTGACTTACCAAAGGGTGCGTGGCCACTGGATGGCTGACGCCGGGCAAAGGTATATACC
AACTACATTCTCACGTTTGCATACACCGGTGCGCTGACCGATAACTACCCTCACCAGCTCTAAGGCTCTCCGCCGTAGTCGGGTAGCGGTTACCCCATGCGGATCTCTGAAAAGTACTGAGCCCTTGGTTTTGGGACCCGAGGCGACTACATTTGC
AGCCATTCTGTGTGTGGTCGACGGCCGCGCCGCAAAGAGGCGGCTTGCAACAACCAATGTTTAGCCACCAATAACGGTGCGCAGCAATGTACCATGGCTTCAGCTGGTAGATCTGAGGCGTGGACGAACCGATTGGCGTTCCGGGGTTAAGAGGCC
GGACCAATTAATAAAGGTGCGACGCACCTATCGAAGGTACATACGGTCCTATACGCCAAGGAAACTCATTCTCAAACTATTCCCCTGGAATTCATTAATATATAGGAAATCACATGAGGTGCATAACCTGCGATTCCTAAGGAAGTGCTTGCCGTT
ATAACTAAACGTACGAGACTACTATTCCAAGCACTAACTTGGACATCAGCACGGGCTATTACGGTCATATGTAACTGTTTTACCCAATCGAATCCGTGATTGGCTGCCCGCTGAATTAGCATTGGTGCGAGGAAATAAGATCGCCCCACCTGGGAA
TCTAATGGGAGTCCAAATCCATCAGCTAGAGATTCGTGTACATACAGCCTGGTCTATTGCACGACCGAGATGCTTGTGTAGCTTGAGCATGGTGGGACTCCGAGTCCCATGTATGTGGTCATGGGTGCGACGCAGGGAGGATATCCTAGCTGAAAG
ACACACTAGAATAAGTACAGTCTAACCCCTCCGTACTCAGACGAATATTGAGAAAAACCGTGAGGAAAAAGAACTGGTGCGGAGTACCGCTCGGCACGCTCGCTGGTTCCAAACCTCGTTGCTGGTGATTTCGGCGTCGCTAACGAATCCACGGAG
TTTTTCGTCAGATAGGACTTGGTGACTACTGCTCAATGCCTTCGTACGATCGGAAATTGACGTTCCTCATCTATGGGTGCGCCGTGCGAGAGACTGAACAAATTGTCGACGACCCAAGTTAGCATCACTCGACAACACAAATATATGGCGCGTTAA
TAAATTTATTTGCATGCCACCAAGTCACTCCACTGTGGGGGCTAACAACGCAGGCGGAATTTAGCCCATAGTAATGGTGCGCCGGTTCCATCACCGAACAGATGGACGACCGTAGTCCAGCGCTTCATTAACTCTCATTGACACAGTAAAGCGACA
CGCCAAAAGGTTAAAGTGTACCAGCTCTCTCGCAAAGCTGACACTTAGTGCCCAATTGGCAGAGGTGCGCTGATAGCGCAGTCCTAATATCTGCCACTGAGTCCGTGCTGCACGCAGAATCACGAGCTAGTGAGCTGCCTACTGGGTTTGGATTGC
TGTTAATTGTTACCTGAAGTCGACAAGGGTGCGCGGTTAATGCGGTTACCCTTGCAACGGACGTATTTGTTAGGTGGGCCTTATGCGGGGAGTGTTCGGGAATGTACCTAAGCGGGTCAGTATTAAGACGCCCATCTATCCGAAGAGCACCATTAT'''
motifs = motifs.split('\n')
greedy = greedy_motifs(motifs, 12, 25)
print('\n'.join(greedy))
